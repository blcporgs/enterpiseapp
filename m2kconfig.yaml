move2kube:
  minreplicas: "1"
  services:
    cfapps.yaml:
      enable: true
    customers:
      "8080":
        servicetype: Ingress
        urlpath: /customers
      childModules:
        customers:
          port: "8080"
          springBootProfiles:
            - dev-inmemorydb
            - local
            - prod-externaldb
      containerizationoption:
        - CNBContainerizer
        - Maven
      dockerfileType: build stage in base image
      enable: true
      mavenProfiles:
        - local
        - dev-inmemorydb
        - prod-externaldb
      statefulset: true
      wartransformer: Tomcat
    frontend:
      "8080":
        servicetype: Ingress
        urlpath: /frontend
      containerizationoption:
        - CNBContainerizer
        - Nodejs-Dockerfile
      enable: true
      port: "8080"
      statefulset: true
    gateway:
      "8080":
        servicetype: Ingress
        urlpath: /gateway
      childModules:
        gateway:
          port: "8080"
          springBootProfiles:
            - dev
            - local
            - prod
      containerizationoption:
        - CNBContainerizer
        - Maven
      dockerfileType: build stage in base image
      enable: true
      mavenProfiles:
        - local
        - dev
        - prod
      statefulset: true
    inventory:
      "8080":
        servicetype: Ingress
        urlpath: /inventory
      childModules:
        inventory:
          port: "8080"
          springBootProfiles:
            - dev-inmemorydb
            - local
            - prod-externaldb
      containerizationoption:
        - CNBContainerizer
        - Maven
      dockerfileType: build stage in base image
      enable: true
      mavenProfiles:
        - local
        - dev-inmemorydb
        - prod-externaldb
      statefulset: true
    move2kube-demos-collect-cf:
      enable: true
    move2kube-demos-collect-k8s:
      enable: true
    move2kube-demos-database:
      enable: true
    orders:
      "8080":
        servicetype: Ingress
        urlpath: /orders
      childModules:
        orders:
          port: "8080"
          springBootProfiles:
            - dev-inmemorydb
            - local
            - prod-externaldb
      containerizationoption:
        - CNBContainerizer
        - Maven
      dockerfileType: build stage in base image
      enable: true
      mavenProfiles:
        - local
        - dev-inmemorydb
        - prod-externaldb
      statefulset: true
  spawncontainers: true
  target:
    cicd:
      tekton:
        gitrepobasicauthsecret: ""
        gitreposshsecret: ""
        registrypushsecret: ""
    default:
      clustertype: Kubernetes
      ingress:
        host: customerportal.com
        ingressclassname: ""
        tls: ""
    imageregistry:
      index.docker.io:
        logintype: username and password
        username: korificf
      namespace: korificf
      url: index.docker.io
  transformers:
    kubernetes:
      argocd:
        namespace: ""
    types:
      - ArgoCD
      - Buildconfig
      - CNBContainerizer
      - CloudFoundry
      - ClusterSelector
      - ComposeAnalyser
      - ComposeGenerator
      - ContainerImagesPushScriptGenerator
      - DockerfileDetector
      - DockerfileImageBuildScript
      - DockerfileParser
      - DotNetCore-Dockerfile
      - EarAnalyser
      - EarRouter
      - Golang-Dockerfile
      - Gradle
      - Jar
      - Jboss
      - Knative
      - Kubernetes
      - KubernetesVersionChanger
      - Liberty
      - Maven
      - Nodejs-Dockerfile
      - OperatorTransformer
      - OperatorsFromTCA
      - PHP-Dockerfile
      - Parameterizer
      - Python-Dockerfile
      - ReadMeGenerator
      - Ruby-Dockerfile
      - Rust-Dockerfile
      - Tekton
      - Tomcat
      - WarAnalyser
      - WarRouter
      - WinWebApp-Dockerfile
      - ZuulAnalyser
  transformerselector: ""
